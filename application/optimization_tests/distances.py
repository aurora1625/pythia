'''
Created on 30 May 2012

@author: george
'''
import numpy, nltk
import time, math
from c_extensions import euclidean#!@UnresolvedImport
from c_extensions import cosine#!@UnresolvedImport
from c_extensions import jaccard#!@UnresolvedImport

def numpy_euclidean(a, b):
    start = time.time()
    assert len(b) == len(a)
    dist = numpy.linalg.norm(a-b)
    print "numpy euclidean", time.time() - start
    return dist

def cython_euclidean(a, b):
    start = time.time()
    dist = euclidean.distance(a,b)
    print "cython euclidean", time.time() - start
    return dist

def numpy_cosine(a, b):
    start = time.time()
    sim = numpy.dot(a, b)  / (math.sqrt(numpy.dot(a, a) * numpy.dot(b, b))) 
    dist = 1-sim
    print "numpy cosine", time.time() - start
    return dist

def cython_cosine(a, b):
    start = time.time()
    dist = cosine.distance(a,b)
    print "cython cosine", time.time() - start
    return dist

def numpy_jaccard(a, b):
    start = time.time()
    indices1 = numpy.nonzero(a==1.0)[0]
    indices2 = numpy.nonzero(b==1.0)[0]
    
    dist = nltk.metrics.distance.jaccard_distance(set(indices1), set(indices2))
    print "numpy jaccard", time.time() - start
    return dist

def cython_jaccard(a, b):
    start = time.time()
    dist = jaccard.distance(a,b)
    print "cython jaccard", time.time() - start
    return dist

a = numpy.array([0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3])
b = numpy.array([0.1, 0.3, 2.2, 3.4, 0.1, 2.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3, 0.1, 0.3, 1.2, 3.4, 0.1, 0.6, 0.5, 1.7, 1.9, 2.1, 5.3])

print numpy_euclidean(a, b)
print cython_euclidean(a, b)
print '-----------------------'
print numpy_cosine(a, b)
print cython_cosine(a, b)
print '-----------------------'
a_jacc = numpy.array([0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0])
b_jacc = numpy.array([0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0])
print numpy_jaccard(a_jacc, b_jacc)
print cython_jaccard(a_jacc, b_jacc)